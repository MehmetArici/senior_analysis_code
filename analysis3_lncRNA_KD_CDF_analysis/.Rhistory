#print(dim(counts_train_set))
#print(length(labels_train_set))
#print(counts_train_set[1:5,])
#print(counts_mat[1:5,])
len(counts_train_set)
length(counts_train_set)
length(labels_train_set)
results_cv = cv.glmnet(counts_train_set, labels_train_set, family = "binomial", type ="auc", alpha=alpha_arg, pmax =pmax_arg)
dim(counts_train_set)
labels_train_set
counts_train_set[1,]
alpha
alpha_arg
ounts<-read.csv(counts_filename, header = TRUE, sep = "\t");
labels<-read.table(labels_filename, sep = "\t");
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
kmers<-colnames(counts[-c(1,2)])
counts_mat = as.matrix(counts[,-c(1,2)]) #, sparse=TRUE)
counts<-read.csv(counts_filename, header = TRUE, sep = "\t");
labels<-read.table(labels_filename, sep = "\t");
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
kmers<-colnames(counts[-c(1,2)])
counts_mat = as.matrix(counts[,-c(1,2)]) #, sparse=TRUE)
counts[,646]
counts[,"646"]
colnames(counts)
counts[,"X646"]
train_set_indices = as.vector(which(indices_mat[cross,] == 1));
test_set_indices = as.vector(which(indices_mat[cross,] == -1));
#print(test_set_indices)
counts_train_set = counts_mat[train_set_indices,]
counts_test_set = counts_mat[test_set_indices,]
labels_train_set = labels_vec[train_set_indices]
labels_test_set = labels_vec[test_set_indices]
#print(dim(counts_train_set))
#print(length(labels_train_set))
#print(counts_train_set[1:5,])
#print(counts_mat[1:5,])
results_cv = cv.glmnet(counts_train_set, labels_train_set, family = "binomial", type ="auc", alpha=alpha_arg, pmax =pmax_arg)
#
lambda_min_val=results_cv$lambda.min
model = glmnet(counts_train_set, labels_train_set, family ="binomial", alpha=alpha_arg, pmax=pmax_arg, nlambda=50)
test_response = predict(model, counts_test_set, s= lambda_min_val, type="response")
test_class = predict(model, counts_test_set, s= lambda_min_val, type="class")
test_class_vec = as.vector(test_class)
test_AUCs[cross] = colAUC(test_response, labels_test_set)
test_AUCs
test_response
labels_test_set
train_set_indices = as.vector(which(indices_mat[cross,] == 1));
test_set_indices = as.vector(which(indices_mat[cross,] == -1));
train_set_indices
test_set_indices
train_set_indices = as.vector(which(indices_mat[cross,] == 1));
test_set_indices = as.vector(which(indices_mat[cross,] == -1));
test_set_indices
indices_mat
indices_mat[1,]
indices_mat[1,]
test_set_indices
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
index_length = length(indices)
index_length
indices[1,]
indices_filename= "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/rnacompete_cv.txt"
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
indices[1,]
dim(counts)
rm(list = ls())
.libPaths( c("~R/lib", .libPaths() ) )
.libPaths()
library(caTools)
library(glmnet)
library(MASS)
library(methods)
source("../../glmnet_code/metrics.r")
aucpr <- function (k, actual, predicted)  {
predicted <- head(predicted, k)
is.new <- rep(FALSE, length(predicted))
is.new[match(unique(predicted), predicted)] <- TRUE
is.relevant <- predicted %in% actual & is.new
score <- sum(cumsum(is.relevant) * is.relevant / seq_along(predicted)) /
min(length(actual), k)
score
}
#library(SparseM)
#args are protein, counts_filename, labels_filename, pmaxarg, alphaarg, crossnum, indices_filename, outfilename
args=(commandArgs(TRUE))
alpha_arg= as.numeric(1)
pmax_arg=as.numeric(300)
counts_filename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2016/code/ndb_feature_data.txt"
labels_filename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2016/code/ndb_labels.txt"
indices_filename= "/Users/User/Dropbox/PTR_cancer/RBPdom/2016/code/ndb_cv.txt"
outfilename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2016/results/ndb_glmnet.txt"
predfilename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2016/results/ndb_pred.txt"
do_scale = 'scale'
counts<-read.csv(counts_filename, header = TRUE, sep = "\t");
labels<-read.table(labels_filename, sep = "\t");
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
kmers<-colnames(counts[-c(1,2)])
counts_mat = as.matrix(counts[,-c(1,2)]) #, sparse=TRUE)
print(counts_mat[1:2,])
labels_vec = as.vector(as.matrix(labels[-1]))
index_length = length(indices)
indices_mat = as.matrix(indices[,1:index_length-1])
cross_num = 10 #nrow(indices_mat)
rm(counts); rm(labels); rm(indices);
gc(reset=TRUE)
test_AUCs=numeric(cross_num);
test_mse=numeric(cross_num);
test_ce=numeric(cross_num);
test_ce_errors=numeric(cross_num);
test_ll=numeric(cross_num);
indices_mat[1,]
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
indices[1,]
indices[1,1:10]
rm(list = ls())
.libPaths( c("~R/lib", .libPaths() ) )
.libPaths()
library(caTools)
library(glmnet)
library(MASS)
library(methods)
source("../../glmnet_code/metrics.r")
aucpr <- function (k, actual, predicted)  {
predicted <- head(predicted, k)
is.new <- rep(FALSE, length(predicted))
is.new[match(unique(predicted), predicted)] <- TRUE
is.relevant <- predicted %in% actual & is.new
score <- sum(cumsum(is.relevant) * is.relevant / seq_along(predicted)) /
min(length(actual), k)
score
}
#library(SparseM)
#args are protein, counts_filename, labels_filename, pmaxarg, alphaarg, crossnum, indices_filename, outfilename
args=(commandArgs(TRUE))
alpha_arg= as.numeric(1)
pmax_arg=as.numeric(300)
counts_filename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/rnacompete_feature_data.txt"
labels_filename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/rnacompete_labels.txt"
indices_filename= "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/rnacompete_cv.txt"
outfilename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/results/rnacompete_glmnet.txt"
predfilename = "/Users/User/Dropbox/PTR_cancer/RBPdom/2014/results/rnacompete_pred.txt"
do_scale = 'scale'
counts<-read.csv(counts_filename, header = TRUE, sep = "\t");
labels<-read.table(labels_filename, sep = "\t");
indices<-read.table(indices_filename, sep = "\t");  #defines cv sets, 1 means that the sequence exists, -1 means that the sequence doesn't exits
kmers<-colnames(counts[-2])
counts_mat = as.matrix(counts[,-2]) #, sparse=TRUE)
if (do_scale == 'scale')
{
counts_mat = scale(counts_mat)
}
print(counts_mat[1:2,])
labels_vec = as.vector(as.matrix(labels[-1]))
index_length = length(indices)
indices_mat = as.matrix(indices[,1:index_length-1])
cross_num = 10 #nrow(indices_mat)
#print(dim(counts_mat))
#print(dim(indices_mat))
#print(length(labels_vec))
#print(counts_mat)
#print(labels_vec)
#print(labels_vec)
rm(counts); rm(labels); rm(indices);
gc(reset=TRUE)
test_AUCs=numeric(cross_num);
test_mse=numeric(cross_num);
test_ce=numeric(cross_num);
test_ce_errors=numeric(cross_num);
test_ll=numeric(cross_num);
for (cross in 1:cross_num)
{
train_set_indices = as.vector(which(indices_mat[cross,] == 1));
test_set_indices = as.vector(which(indices_mat[cross,] == -1));
#print(test_set_indices)
counts_train_set = counts_mat[train_set_indices,]
counts_test_set = counts_mat[test_set_indices,]
labels_train_set = labels_vec[train_set_indices]
labels_test_set = labels_vec[test_set_indices]
#print(dim(counts_train_set))
#print(length(labels_train_set))
#print(counts_train_set[1:5,])
#print(counts_mat[1:5,])
results_cv = cv.glmnet(counts_train_set, labels_train_set, family = "binomial", type ="auc", alpha=alpha_arg, pmax =pmax_arg)
#print("done")
lambda_min_val=results_cv$lambda.min
model = glmnet(counts_train_set, labels_train_set, family ="binomial", alpha=alpha_arg, pmax=pmax_arg, nlambda=50)
test_response = predict(model, counts_test_set, s= lambda_min_val, type="response")
test_class = predict(model, counts_test_set, s= lambda_min_val, type="class")
test_class_vec = as.vector(test_class)
test_AUCs[cross] = colAUC(test_response, labels_test_set)
#test_mse[cross] = mse(labels_test_set,test_response);
#test_ce[cross] = ce(labels_test_set,test_response);
#test_ll[cross] = sum(ll(labels_test_set,test_response));
write.table(t(labels_test_set), file = predfilename, row.names = FALSE, col.names = FALSE, append = TRUE)
test_response <- round(test_response,4);
write.table(t(test_response), file = predfilename, row.names = FALSE, col.names = FALSE, append = TRUE)
#test_ce_errors[cross] = sum(labels_test_set * log(test_response) + (1-labels_test_set) * log(1-test_response));
#labels_test_set_mean = mean(labels_test_set);
#sstot = sum((labels_test_set - labels_test_set_mean)^2);
#ssres = sum((labels_test_set - test_response)^2);
#r_squared[cross] = 1 - (ssres/sstot);
}
gc(reset=TRUE)
write.table(t(rbind(test_AUCs, test_mse, test_ll)), file = outfilename, row.names = FALSE, col.names = FALSE)
cat("Average of 10 Results\n", file = outfilename, append =TRUE)
cat(mean(test_AUCs[1:10]), mean(test_mse[1:10]), mean(test_ll[1:10]), "\n", file = outfilename, append = TRUE)
cat("Average of 100 Results\n", file = outfilename, append =TRUE)
cat(mean(test_AUCs), mean(test_mse), mean(test_ll), "\n", file = outfilename, append = TRUE)
model_whole  = glmnet(counts_mat, labels_vec, family = "binomial", alpha = alpha_arg, pmax=pmax_arg)
coeffs <- coef(model_whole, s = lambda_min_val)[-1, 1]
#coeffs_selected <- coeffs[coeffs !=  0]
sorted_coeffs = sort(coeffs, index.return = TRUE, decreasing = TRUE)
#selected_kmers_indices = which(coeffs!=0)
#selected_kmers = kmers[selected_kmers_indices]
#print(selected_kmers)
top10_features = kmers[sorted_coeffs$ix[1:10]]
#print(selected_kmers)
#print(sorted_coeffs$ix[1:10])
#print(top10_features)
bottom10_features = kmers[tail(sorted_coeffs$ix,10)]
#print(bottom10_features)
result = cbind(top10_features, sorted_coeffs$x[1:10])
#print(result)
#print('\n')
cat("\n",file=outfilename,append=TRUE)
write.table(result, file = outfilename, row.names  = FALSE, col.names = FALSE,  quote = FALSE, append = TRUE)
result = cbind(bottom10_features, tail(sorted_coeffs$x, 10))
#print(result)
cat("\n",file=outfilename,append=TRUE)
write.table(result, file = outfilename, row.names  = FALSE, col.names = FALSE,  quote = FALSE, append = TRUE)
warnings()
test_AUCs
mean(test_AUCs)
#library(maxstat)
library(survival)
test.diff
test.diff$exp
test.diff$exp
install.packages("clusterSim")
library(install.packages('RMySQL', repos='http://cran.us.r-project)
)
)
''
)
))))
''
library(clusterSim)
library(clusterSim)
library(DAAG)
install.packages("DAAG")
library(DAAG)
cv.lm(df=mydata, fit, m=3)
fit <- lm(y ~ x1 + x2 + x3, data=mydata)
cv.lm(df = houseprices, form.lm = formula(sale.price ~ area), m=3)
houseprices
cv.lm(df = houseprices, form.lm = formula(sale.price ~ area), m=3)
cv.lm(houseprices, formula(sale.price ~ area), m=3)
cvres = cv.lm(houseprices, formula(sale.price ~ area), m=3)
cvres
cvres$Predicted
houseprices
cvres$cvpred
cvres = cv.lm(houseprices, formula(sale.price ~ area), m=10)
cv.lm( formula = houseprices$sale.price ~ houseprices$area), m=3)
cv.lm( formula = houseprices$sale.price ~ houseprices$area, m=3)
cv.lm(houseprices$sale.price ~ houseprices$area, m=3)
cv.lm( formula = houseprices$sale.price ~ houseprices$area)
cv.lm( formula = houseprices$sale.price ~ houseprices$area)
cv.lm( formula = houseprices$sale.price ~ houseprices$area)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
df$n
cvres = cv.lm(houseprices, formula(sale.price ~ area), m=10)
install.packages(cowplot)
install.packages('cowplot')
install.packages('ggplot2')
library(stringr)
library(ggvis)
install.packages('ggvis')
library(ggvis)
data(pbc)
mvnXII
library(mclust)
mvnXII
mclust
Mclust
n <- 1000
set.seed(0)
x <- rnorm(n, mean = -1, sd = 2)
mvnX(x)
mu <- c(-1, 0, 1)
set.seed(0)
x <- sweep(matrix(rnorm(n*3), n, 3) %*% (2*diag(3)),
MARGIN = 2, STATS = mu, FUN = "+")
mvnXII(x)
x
fix(mvnXII
)
library(mclust)
source("https://bioconductor.org/biocLite.R")
biocLite()
getwd
getwd()
rm(list=ls(all=TRUE))
library(ggplot2)
library(data.table)
targetdir = '/Users/User/Dropbox/SpongeWebsite/Table2_target_notarget/results/'
datadir = '/Users/User/Dropbox/SpongeWebsite/Table5_lncRNA_KD_datasets/'
outdir = '/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/results/'
setwd('/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/')
lncRNA = "ENSG00000245532" # we expect ENSG id
RBP = "PUM2"# we expect gene symbol
lncRNA_KD_mapping = data.table(read.table(paste(datadir, "ENSG_id_KD_data_mapping.txt", sep = ''), header = TRUE,  sep = "\t"))
KD_files = lncRNA_KD_mapping[gene_id == lncRNA,]$KD_data_key
KD_files
lncRNA_KD_mapping
lncRNA_KD_mapping[gene_id == lncRNA,]
lncRNA_KD_mapping = data.table(read.table(paste(datadir, "ENSG_id_KD_data_mapping.txt", sep = ''), header = TRUE,  sep = "\t"))
KD_files = lncRNA_KD_mapping[gene_id == lncRNA,]$KD_data_key
count = 1
KD_files
length(KD_files9)
length(KD_files)
for (LFC_filekey in KD_files){print(LFC_filekey)}
LFC_filename = paste(datadir, LFC_filekey, '_KD_LFCs.txt', sep = '')
if(file.exists(LFC_filename))
{
LFC_data = read.table(LFC_filename, header = TRUE, row.names =1, sep = "\t")
} else{
print("ERROR: cannot open the knockdown file")
}
target_list = readLines(paste(targetdir, RBP ,'_target_genes.txt', sep = ''))
nontarget_list = readLines(paste(targetdir, RBP ,'_nontarget_genes.txt', sep = ''))
existing_target_list = intersect(target_list, row.names(LFC_data));
num_targets = length(existing_target_list);
existing_nontarget_list = intersect(nontarget_list, row.names(LFC_data));
num_nontargets = length(existing_nontarget_list);
target_data = LFC_data[existing_target_list, 1]
nontarget_data = LFC_data[existing_nontarget_list, 1]
outfilekey =  paste(outdir,  RBP, '_', lncRNA, '_analysis3','_KDdata', count, sep = '')
num_targets
num_nontargets
targets_df <- data.frame(group = "Targets" , value = target_data, gene_id = existing_target_list );
background_df <- data.frame(group = "Background" , value = nontarget_data, gene_id = existing_nontarget_list);
save.data <- rbind(targets_df,background_df);
write.table(save.data, file = paste(outfilekey, '.txt', sep = ''),  quote = FALSE, sep = "\t", row.names = FALSE)
# target_data and nontarget_data can be empty.
result = wilcox.test(target_data, nontarget_data)
pvalue <- result$p.value
print(pvalue)
target_legend = paste('Targets (',length(existing_target_list), ')', sep = '')
background_legend = paste('Background (',length(existing_nontarget_list), ')', sep = '')
df <- data.frame(x = c(target_data, nontarget_data), ggg=factor(rep(1:2, c(length(target_data),length(nontarget_data)))))
ggplot(df, aes(x, colour = ggg)) + scale_size_manual(values=c(3,3)) + stat_ecdf(size=1.5)+ scale_colour_hue(name="", labels=c(paste('Targets (',length(existing_target_list), ')', sep = ''),paste('Background (',length(existing_nontarget_list), ')', sep =''))) +  xlim(-0.5, 0.5) + labs(x = "log fold change") + labs(y = "Cumulative Fraction") + theme(text=element_text(size=16)) + annotate("text", x=0.1, y=-0.02, label= paste('p-val: ', signif(pvalue, digits = 3)))
filename = paste(outfilekey,'.jpeg', sep = '')
ggsave(filename, plot = last_plot())
count = count + 1
rm(list=ls(all=TRUE))
library(ggplot2)
library(data.table)
infofileh <- file(paste(job_id, '_analysis3_info.txt', sep = ''), open="wt")
errorfileh <- file(paste(job_id, '_analysis3_error.txt', sep = ''), open="wt")
sink(infofileh, type="output", append=TRUE) # if this is empty, we should display 'unexpected error occurred'
sink(errorfileh, type="message", append=TRUE)
targetdir = '/Users/User/Dropbox/SpongeWebsite/Table2_target_notarget/results/'
datadir = '/Users/User/Dropbox/SpongeWebsite/Table5_lncRNA_KD_datasets/'
outdir = '/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/results/'
setwd('/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/')
lncRNA = "ENSG00000245532" # we expect ENSG id
RBP = "PUM2"# we expect gene symbol
lncRNA_KD_mapping = data.table(read.table(paste(datadir, "ENSG_id_KD_data_mapping.txt", sep = ''), header = TRUE,  sep = "\t"))
if(!(lncRNA %in%  lncRNA_KD_mapping$gene_id)){
print("ERROR: There is no knockdown data for this lncRNA")
} else {
KD_files = lncRNA_KD_mapping[gene_id == lncRNA,]$KD_data_key
count = 1
for (LFC_filekey in KD_files){
LFC_filename = paste(datadir, LFC_filekey, '_KD_LFCs.txt', sep = '')
if(file.exists(LFC_filename))
{
LFC_data = read.table(LFC_filename, header = TRUE, row.names =1, sep = "\t")
} else{
print("ERROR: cannot open the knockdown file")
}
if(length(args) > 3){
if(file.exists(targetfile) && file.exists(nontargetfile)){
target_list = readLines(targetfile)
nontarget_list = readLines(nontargetfile)
}else{
print("ERROR: cannot open the target / background files that the user uploaded")
}
} else {
target_list = readLines(paste(targetdir, RBP ,'_target_genes.txt', sep = ''))
nontarget_list = readLines(paste(targetdir, RBP ,'_nontarget_genes.txt', sep = ''))
}
existing_target_list = intersect(target_list, row.names(LFC_data));
num_targets = length(existing_target_list);
existing_nontarget_list = intersect(nontarget_list, row.names(LFC_data));
num_nontargets = length(existing_nontarget_list);
target_data = LFC_data[existing_target_list, 1]
nontarget_data = LFC_data[existing_nontarget_list, 1]
outfilekey =  paste(outdir,  RBP, '_', lncRNA, '_analysis3','_KDdata', count, sep = '')
if (num_targets > 0 && num_nontargets > 0)
{
targets_df <- data.frame(group = "Targets" , value = target_data, gene_id = existing_target_list );
background_df <- data.frame(group = "Background" , value = nontarget_data, gene_id = existing_nontarget_list);
save.data <- rbind(targets_df,background_df);
write.table(save.data, file = paste(outfilekey, '.txt', sep = ''),  quote = FALSE, sep = "\t", row.names = FALSE)
# target_data and nontarget_data can be empty.
result = wilcox.test(target_data, nontarget_data)
pvalue <- result$p.value
print(pvalue)
target_legend = paste('Targets (',length(existing_target_list), ')', sep = '')
background_legend = paste('Background (',length(existing_nontarget_list), ')', sep = '')
df <- data.frame(x = c(target_data, nontarget_data), ggg=factor(rep(1:2, c(length(target_data),length(nontarget_data)))))
ggplot(df, aes(x, colour = ggg)) + scale_size_manual(values=c(3,3)) + stat_ecdf(size=1.5)+ scale_colour_hue(name="", labels=c(paste('Targets (',length(existing_target_list), ')', sep = ''),paste('Background (',length(existing_nontarget_list), ')', sep =''))) +  xlim(-0.5, 0.5) + labs(x = "log fold change") + labs(y = "Cumulative Fraction") + theme(text=element_text(size=16)) + annotate("text", x=0.1, y=-0.02, label= paste('p-val: ', signif(pvalue, digits = 3)))
filename = paste(outfilekey,'.jpeg', sep = '')
ggsave(filename, plot = last_plot())
count = count + 1
} else # write to log file
{
print('ERROR: cannot perform the analysis as the number of target or background genes with expression data is 0.')
}
}
}
sink(type="message")
sink(type="output")
rm(list=ls(all=TRUE))
library(ggplot2)
library(data.table)
args = commandArgs(trailingOnly=TRUE)
lncRNA = args[1]
RBP = args[2]
job_id = args[3]
if(length(args) > 3) # user supplied target background file
{
targetfile = args[4]
nontargetfile = args[5]
}
infofileh <- file(paste(job_id, '_analysis3_info.txt', sep = ''), open="wt")
errorfileh <- file(paste(job_id, '_analysis3_error.txt', sep = ''), open="wt")
sink(infofileh, type="output", append=TRUE) # if this is empty, we should display 'unexpected error occurred'
sink(errorfileh, type="message", append=TRUE)
targetdir = '/Users/User/Dropbox/SpongeWebsite/Table2_target_notarget/results/'
datadir = '/Users/User/Dropbox/SpongeWebsite/Table5_lncRNA_KD_datasets/'
outdir = '/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/results/'
setwd('/Users/User/Dropbox/SpongeWebsite/analysis_code/analysis3_lncRNA_KD_CDF_analysis/')
lncRNA = "ENSG00000245532" # we expect ENSG id
RBP = "PUM2"# we expect gene symbol
lncRNA_KD_mapping = data.table(read.table(paste(datadir, "ENSG_id_KD_data_mapping.txt", sep = ''), header = TRUE,  sep = "\t"))
if(!(lncRNA %in%  lncRNA_KD_mapping$gene_id)){
print("ERROR: There is no knockdown data for this lncRNA")
} else {
KD_files = lncRNA_KD_mapping[gene_id == lncRNA,]$KD_data_key
count = 1
for (LFC_filekey in KD_files){
LFC_filename = paste(datadir, LFC_filekey, '_KD_LFCs.txt', sep = '')
if(file.exists(LFC_filename))
{
LFC_data = read.table(LFC_filename, header = TRUE, row.names =1, sep = "\t")
} else{
print("ERROR: cannot open the knockdown file")
}
if(length(args) > 3){
if(file.exists(targetfile) && file.exists(nontargetfile)){
target_list = readLines(targetfile)
nontarget_list = readLines(nontargetfile)
}else{
print("ERROR: cannot open the target / background files that the user uploaded")
}
} else {
target_list = readLines(paste(targetdir, RBP ,'_target_genes.txt', sep = ''))
nontarget_list = readLines(paste(targetdir, RBP ,'_nontarget_genes.txt', sep = ''))
}
existing_target_list = intersect(target_list, row.names(LFC_data));
num_targets = length(existing_target_list);
existing_nontarget_list = intersect(nontarget_list, row.names(LFC_data));
num_nontargets = length(existing_nontarget_list);
target_data = LFC_data[existing_target_list, 1]
nontarget_data = LFC_data[existing_nontarget_list, 1]
outfilekey =  paste(outdir,  RBP, '_', lncRNA, '_analysis3','_KDdata', count, sep = '')
if (num_targets > 0 && num_nontargets > 0)
{
targets_df <- data.frame(group = "Targets" , value = target_data, gene_id = existing_target_list );
background_df <- data.frame(group = "Background" , value = nontarget_data, gene_id = existing_nontarget_list);
save.data <- rbind(targets_df,background_df);
write.table(save.data, file = paste(outfilekey, '.txt', sep = ''),  quote = FALSE, sep = "\t", row.names = FALSE)
# target_data and nontarget_data can be empty.
result = wilcox.test(target_data, nontarget_data)
pvalue <- result$p.value
print(pvalue)
target_legend = paste('Targets (',length(existing_target_list), ')', sep = '')
background_legend = paste('Background (',length(existing_nontarget_list), ')', sep = '')
df <- data.frame(x = c(target_data, nontarget_data), ggg=factor(rep(1:2, c(length(target_data),length(nontarget_data)))))
ggplot(df, aes(x, colour = ggg)) + ggtitle(LFC_filekey) + scale_size_manual(values=c(3,3)) + stat_ecdf(size=1.5)+ scale_colour_hue(name="", labels=c(paste('Targets (',length(existing_target_list), ')', sep = ''),paste('Background (',length(existing_nontarget_list), ')', sep =''))) +  xlim(-0.5, 0.5) + labs(x = "log fold change") + labs(y = "Cumulative Fraction") + theme(text=element_text(size=16)) + annotate("text", x=0.1, y=-0.02, label= paste('p-val: ', signif(pvalue, digits = 3)))
filename = paste(outfilekey,'.jpeg', sep = '')
ggsave(filename, plot = last_plot())
count = count + 1
} else # write to log file
{
print('ERROR: cannot perform the analysis as the number of target or background genes with expression data is 0.')
}
}
}
sink(type="message")
sink(type="output")
